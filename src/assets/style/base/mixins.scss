@import "color";
@import "flexbox";
@import "functions";

@mixin trans-font-size($size, $line, $math: round) {
  font-size: $size;
  @if $math == 'round' {
    line-height: round($size * $line);
  } @else if $math == 'floor' {
    line-height: floor($size * $line);
  }
}

@mixin display1 {
  @include trans-font-size(42px, 1.22);
  font-weight: $semi-bold;
  letter-spacing: -0.02em;
}
@mixin headline1 {
  @include trans-font-size(32px, 1.26);
  font-weight: $semi-bold;
  letter-spacing: -0.02em;
}
@mixin headline2 {
  @include trans-font-size(28px, 1.28);
  font-weight: $semi-bold;
}
@mixin headline3 {
  @include trans-font-size(26px, 1.28);
  font-weight: $semi-bold;
}
@mixin headline4 {
  @include trans-font-size(24px, 1.28);
  font-weight: $semi-bold;
}
@mixin headline5 {
  @include trans-font-size(22px, 1.26);
  font-weight: $semi-bold;
}
@mixin headline6 {
  @include trans-font-size(18px, 1.38);
  font-weight: $regular;
}
@mixin body1 {
  @include trans-font-size(16px, 1.54);
  font-weight: $regular;
}
@mixin body2 {
  @include trans-font-size(14px, 1.4);
  font-weight: $regular;
}
@mixin caption1 {
  @include trans-font-size(12px, 1.22);
  font-weight: $regular;
}
@mixin caption2 {
  @include trans-font-size(10px, 1.26, floor);
  font-weight: $regular;
}

@mixin f-light {
  font-weight: $light;
}

@mixin f-regular {
  font-weight: $regular !important;
}

@mixin f-medium {
  font-weight: $medium;
}

@mixin f-bold {
  font-weight: $semi-bold;
}
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    content: " "; // 1
    display: table; // 2
  }
  &:after {
    clear: both;
  }
}

// 툴팁 등에 사용
@mixin shadow1 {
  box-shadow: 0 0 6px rgba(0, 0, 0, 0.1);
}
// 모바일 카드를 감싼 box 등에 사용
@mixin shadow2 {
  box-shadow: 0 5px 10px 1px rgba(0, 0, 0, 0.03);
}
// topbar, header 등에 사용
@mixin shadow3 {
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
}
// xlarge 버튼 등에 사용
@mixin shadow4 {
  box-shadow: 0 3px 7px rgba(0, 0, 0, 0.06);
}

@mixin transition($transition) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}

@mixin transform($transform) {
  transform: $transform;
  -moz-transform: $transform;
  -ms-transform: $transform;
  -o-transform: $transform;
  -webkit-transform: $transform;
}

//  # cross-browsing

@mixin opacity($opacity) {
  opacity: $opacity;
  // IE8 filter
  $opacity-ie: ($opacity * 100);
  //filter: ~"alpha(opacity=${opacity-ie})";
}

@mixin background-opacity($color, $opacity: 1) {
  background: $color;
  background: rgba($color, $opacity);
}

@mixin color-opacity($color, $opacity: 1) {
  color: rgba($color, $opacity);
}

//  # box, border, shadow, line
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}

@mixin get-columns-width-pc($cols) {
  @include pc {
    -ms-flex: 0 0 calc((100% - #{$grid-gutter-width-pc} - (#{$grid-gutter-width-pc} * (#{$grid-columns-pc} - 1) )) / #{$grid-columns-pc} * #{$cols} + #{$grid-gutter-width-pc} * (#{$cols}));
    flex: 0 0 calc((100% - #{$grid-gutter-width-pc} - (#{$grid-gutter-width-pc} * (#{$grid-columns-pc} - 1) )) / #{$grid-columns-pc} * #{$cols} + #{$grid-gutter-width-pc} * (#{$cols}));
    max-width: calc((100% - #{$grid-gutter-width-pc} - (#{$grid-gutter-width-pc} * (#{$grid-columns-pc} - 1) )) / #{$grid-columns-pc} * #{$cols} + #{$grid-gutter-width-pc} * (#{$cols}));
  }
}

@mixin get-columns-width-mobile($cols) {
  @include mobile {
    -ms-flex: 0 0 calc((100% - #{$grid-gutter-width-mobile} - (#{$grid-gutter-width-mobile} * (#{$grid-columns-mobile} - 1) )) / #{$grid-columns-mobile} * #{$cols} + #{$grid-gutter-width-mobile} * (#{$cols}));
    flex: 0 0 calc((100% - #{$grid-gutter-width-mobile} - (#{$grid-gutter-width-mobile} * (#{$grid-columns-mobile} - 1) )) / #{$grid-columns-mobile} * #{$cols} + #{$grid-gutter-width-mobile} * (#{$cols}));
    max-width: calc((100% - #{$grid-gutter-width-mobile} - (#{$grid-gutter-width-mobile} * (#{$grid-columns-mobile} - 1) )) / #{$grid-columns-mobile} * #{$cols} + #{$grid-gutter-width-mobile} * (#{$cols}));
  }
}

@mixin get-offset-pc($cols) {
  @include pc {
    margin-left: calc((((100% - #{$grid-gutter-width-pc} - (#{$grid-gutter-width-pc} * (#{$grid-columns-pc} - 1) )) / #{$grid-columns-pc}) + (#{$grid-gutter-width-pc})) * #{$cols});
  }
}

@mixin get-offset-mobile($cols) {
  @include mobile {
    margin-left: calc((((100% - #{$grid-gutter-width-mobile} - (#{$grid-gutter-width-mobile} * (#{$grid-columns-mobile} - 1) )) / #{$grid-columns-mobile}) + (#{$grid-gutter-width-mobile})) * #{$cols});
  }
}

@mixin inline-block() {
  display: -moz-inline-stack;
  display: inline-block;
  zoom: 1;
  *display: inline;
}

@mixin pc {
  @media only screen and (min-width: $screen-sm) { @content }
}

@mixin mobile {
  @media only screen and (max-width: $screen-sm) { @content }
}


@mixin placeholder {
  &::-webkit-input-placeholder { @content }
  &:-moz-placeholder           { @content }
  &::-moz-placeholder          { @content }
  &:-ms-input-placeholder      { @content }
  &::-ms-input-placeholder     { @content }
  &::placeholder               {
    @content;
    opacity: 1;
  }
}

@mixin ellipsis($clamp: 1, $word-break: keep-all) {
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $clamp;
  -webkit-box-orient: vertical;
  word-wrap: break-word;
  word-break: $word-break;
}

@mixin disabled {
  cursor: not-allowed !important;
  pointer-events: none;
}

@mixin selection($background) {
  @if is-number($background) {
    $color: inherit;
    $cursor: text;
    ::selection      {
      color: $color;
      background-color: darken(#FFF, $background);
      background-color: fade(#000, $background);
      cursor: $cursor;
    }
    ::-moz-selection {
      color: $color;
      background-color: darken(#FFF, $background);
      background-color: fade(#000, $background);
      cursor: $cursor;
    }
  } @else {
    $color:white;
    $color:text;
    ::selection      { color: $color; background-color: $background; cursor: $cursor; }
    ::-moz-selection { color: $color; background-color: $background; cursor: $cursor; }
  }
}

@mixin user-select($select) {
  -webkit-user-select: $select;
  -moz-user-select: $select;
  -ms-user-select: $select; // IE10+
  user-select: $select;
}

@mixin remove-active-and-focus($background: transparent) {
  &:active, &:focus {
    background: $background;
  }
}

@mixin state-style() {
  &:focus,&:active,&.hover-test {
    @content
  }
  @include pc {
    &:hover {
      @content
    }
  }
}

@mixin spacing {
  // 간격 조절
  $sides: ("b": "bottom", "t": "top", "l": "left", "r": "right", "": "all",  "x": "x", "y": "y");
  $size: 2;
  $units: 50;

  @each $prefix, $value in $sides {
    .m#{$prefix} {
      &-auto {
        @if $prefix == "" {
          margin: auto !important;
        } @else if $prefix == "x" {
          margin-left: auto !important;
          margin-right: auto !important;
        } @else if $prefix == "y" {
          margin-top: auto !important;
          margin-bottom: auto !important;
        } @else {
          margin-#{$value}: auto !important;
        }
      }
    }

    @for $i from 0 through $units {
      .m#{$prefix} {
        &-#{($i * $size)} {
          @if $prefix == "" {
            margin: #{($i * $size)}px !important;
          } @else if $prefix == "x" {
            margin-left: #{($i * $size)}px !important;
            margin-right: #{($i * $size)}px !important;
          } @else if $prefix == "y" {
            margin-top: #{($i * $size)}px !important;
            margin-bottom: #{($i * $size)}px !important;
          } @else {
            margin-#{$value}: #{($i * $size)}px !important;
          }
        }
      }
      .p#{$prefix} {
        &-#{($i * $size)} {
          @if $prefix == "" {
            padding: #{($i * $size)}px !important;
          } @else if $prefix == "x" {
            padding-left: #{($i * $size)}px !important;
            padding-right: #{($i * $size)}px !important;
          } @else if $prefix == "y" {
            padding-top: #{($i * $size)}px !important;
            padding-bottom: #{($i * $size)}px !important;
          } @else {
            padding-#{$value}: #{($i * $size)}px !important;
          }
        }
      }
    }
  }
}

@mixin margin-x($value) {
  margin-left: $value;
  margin-right: $value;
}

@mixin padding-y($value) {
  padding-top: $value;
  padding-bottom: $value;
}

@mixin flex-v-middle() {
  @include flexbox();
  @include align-items(center);
}

@mixin flex-column-v-middle() {
  @include flexbox();
  @include flex-direction(column);
  @include align-items(center);
}
